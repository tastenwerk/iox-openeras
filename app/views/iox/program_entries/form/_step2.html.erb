<div id="step2" class="step-pane">
  <div id="crew-grid"></div>
</div>

<script type="text/javascript">


  $(document).ready( function(){


    function prepareSaveCrew( options ){
      var model = options.data.models[0];
      model.program_entry_id = '<%= @program_entry.id %>';
      if( !model.person_id ){
        iox.flash.alert('<%= t('select_a_person') %>');
        return;
      }
      return model;
    }

    function saveCrewSuccess( json, options ){
        crewGrid.data('kendoGrid').dataSource.read();
        iox.flash.rails(json.flash);
        options.success(json.item);
    }

    function saveCrewError( json, options ){
      iox.flash.rails(json.flash);
      options.error();
    }

    $('.select-members').select2({
      formatNoMatches: function( term ){
        return '<%= t('no_matches') %>! '+term+' <%= t("create").downcase %>? <%= t('if_yes_press_enter') %>';
      }
    }).select2('container').find('.select2-input').on('keydown', function( e ){
      var term = $(this).val();
      if( e.keyCode !== 13 || term.indexOf(' ') < 1 )
        return;
      if( confirm( term + ' <%= t('does_not_exist_create') %>') )
        $.ajax({
          url: '/iox/people',
          type: 'post',
          dataType: 'script',
          data: { person: { name: term } }
        });
    });

    var crewUrl = '<%= crew_of_program_entry_path( @program_entry ) %>'
      , crewDataSource = new kendo.data.DataSource({
          transport: {
              read:  function( options ){
                $.getJSON( crewUrl, options.success );
              },
              update: function updateCrew( options ){
                var model = prepareSaveCrew( options );
                if( !model )
                  return options.error('<%= t('select_a_person') %>');
                $.ajax({ url: '<%= program_entry_people_path %>/'+model.id, type: 'patch', dataType: 'json',
                         data: { program_entry_person: options.data.models[0] },
                         success: function( json ){ saveCrewSuccess( json, options ) },
                         error: function( json ){ saveCrewError( json, options ) }
                });
              },
              destroy: function destroyCrewMember( options ){
                var model = prepareSaveCrew( options );
                if( !model )
                  return options.error('<%= t('select_a_person') %>');
                $.ajax({ url: '<%= program_entry_people_path %>/'+model.id, type: 'delete', dataType: 'json',
                         success: function( json ){ iox.flash.rails(json.flash); options.success(); },
                         error: function( json ){ iox.flash.rails(json.flash); options.error(); }
                });
              },
              create: function createCrew( options ){
                var model = prepareSaveCrew( options );
                if( !model )
                  return options.error('<%= t('select_a_person') %>');
                $.ajax({ url: '<%= program_entry_people_path %>', type: 'post', dataType: 'json',
                         data: { program_entry_person: options.data.models[0] },
                         success: function( json ){ saveCrewSuccess( json, options ) },
                         error: function( json ){ saveCrewError( json, options ) }
                });
              }
          },
          batch: true,
          schema: {
            model: {
              id: 'id',
              fields: {
                  'name': { editable: true },
                  'function': { editable: true },
                  'program_entry_id': { editable: true },
                  'person_id': { editable: true },
                  role: { editable: true },
                  updated_at: { editable: false, type: 'date' }
              }
            }
          }
      });

      var crewGrid = $("#crew-grid").kendoGrid({
        dataSource: crewDataSource,
        toolbar: [
          { name: "create", text: "<%= t('program_entry.add_member') %>" }
        ],
        sortable: true,
        pageable: false,
        serverPaging: false,
        serverFiltering: false,
        serverSorting: false,
        height: 230,
        editable: {
            confirmation: false,
            mode: "inline"
        },
        columns: [
          { field: 'name', title: "<%= t('name') %>", editor: personListEditor },
          { field: 'function', title: "<%= t('program_entry.person.function') %>" },
          { field: 'role', title: "<%= t('program_entry.person.role') %>" },
          {
            field: "updated_at",
            title: "<%= t('updated_at') %>",
            width: 150,
            format: "{0:dd.MM.yyyy HH:mm}"
          },
          { command: [
            { name: "edit", text: { edit: 'Edit.', cancel: "<%= t('cancel')[0,3] %>.", update: "Ok"} },
            { name: "destroy", text: '<%= t('delete')[0,4] %>'} ], title: "&nbsp;", width: "172px" },
        ]
      });

    function personListEditor( container, options ){
      var crewAutoComplete = $('<input type="text" data-bind="value:' + options.field + '"/>')
      .appendTo(container)
      .kendoAutoComplete({
          dataTextField: "name",
          placeholder: '<%= t('person.type_person_name') %>',
          template: '<span>${ data.name }</span>' +
                    ' <i>${ data.ensemble_names }</i>',
          filter: 'contains',
          minLength: 2,
          dataSource: {
              type: "json",
              serverFiltering: true,
              serverPaging: false,
              transport: {
                  read: '<%= simple_people_path %>'
              }
          },
          change: function( e ) {
            var idx = $(e.sender._current).index();
            item = crewAutoComplete.data('kendoAutoComplete').dataItem( idx );

            var crewEntry = crewGrid.data('kendoGrid').dataSource.at( container.closest('tr').index() );
            if( typeof(item) === 'undefined' )
              $.get( '<%= new_person_path %>?skip_edit=true&name='+crewAutoComplete.val(), function( html ){
                $('.awaiting-new-record-id').removeClass('awaiting-new-record-id');
                crewAutoComplete.addClass('awaiting-new-record-id').data('setNewRecordId', function setNewRecordId(record){
                  crewEntry.set( 'person_id', record.id );
                  crewAutoComplete.data('setNewRecordId',null).removeClass('awaiting-new-record-id');
                });
                new iox.Win({ content: html, title: '<%= t('person.add_person_question') %>' });
              });
            else
              crewEntry.set( 'person_id', item.id );
          }
      });
    }

    $("#add-crew").click(function(e) {
      crewGrid.add();
      e.preventDefault();
    });

    /*
    $.getJSON( '<%= crew_of_program_entry_path( @program_entry ) %>', function( json ){
      json.forEach( function( person ){
        crewData.data.push( person );
      });
      ko.cleanNode( $('#crew-list').get(0) );
      ko.applyBindings( crewData, $('#crew-list').get(0) );
      reloadPreview();
      setTimeout( function(){

        $('#crew-list').sortable({
          stop: function( e, ui ){
            var newOrder = $(this).sortable('toArray').toString();
            $.ajax({ url: '<%= order_crew_program_entry_path(@program_entry) %>',
                      type: 'post',
                      data: { order: newOrder },
                      dataType: 'json',
                      success: function( json ){
                        var error, notice;
                        json.forEach( function( msg ){
                          if( msg[0] === 'notice' )
                            notice = msg[1];
                          else if( msg[0] === 'alert' )
                            error = msg[1];
                        });
                        if( error )
                          iox.flash.alert( error );
                        if( notice )
                          iox.flash.notice( notice );
                      }
            });
          }
        });

        $('#crew-list').on('click', 'li .icon-remove', function(e){
          var person = ko.dataFor($(this).closest('li').get(0));
          $.ajax({ url: '<%= program_entry_people_path %>/'+person.id, type: 'delete', dataType: 'json', success: function( json ){
              if( json.success ){
                crewData.data.remove( person );
                //iox.flash.notice('<%= t('ensemble.member_removed') %>');
              }
            }
          })
        });

      },100);

    });
    */

    $('.person-function').select2({
      tags: <%= raw Rails.configuration.iox.publive_person_functions %>,
      tokenSeparators: [","]
    });


  });

</script>